# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_feature_build', [dirname(__file__)])
        except ImportError:
            import _feature_build
            return _feature_build
        if fp is not None:
            try:
                _mod = imp.load_module('_feature_build', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _feature_build = swig_import_helper()
    del swig_import_helper
else:
    import _feature_build
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _feature_build.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _feature_build.SwigPyIterator_value(self)
    def incr(self, n = 1): return _feature_build.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _feature_build.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _feature_build.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _feature_build.SwigPyIterator_equal(self, *args)
    def copy(self): return _feature_build.SwigPyIterator_copy(self)
    def next(self): return _feature_build.SwigPyIterator_next(self)
    def __next__(self): return _feature_build.SwigPyIterator___next__(self)
    def previous(self): return _feature_build.SwigPyIterator_previous(self)
    def advance(self, *args): return _feature_build.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _feature_build.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _feature_build.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _feature_build.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _feature_build.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _feature_build.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _feature_build.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _feature_build.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class RawFeatureData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawFeatureData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RawFeatureData, name)
    __repr__ = _swig_repr
    def iterator(self): return _feature_build.RawFeatureData_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _feature_build.RawFeatureData___nonzero__(self)
    def __bool__(self): return _feature_build.RawFeatureData___bool__(self)
    def __len__(self): return _feature_build.RawFeatureData___len__(self)
    def __getitem__(self, *args): return _feature_build.RawFeatureData___getitem__(self, *args)
    def __delitem__(self, *args): return _feature_build.RawFeatureData___delitem__(self, *args)
    def has_key(self, *args): return _feature_build.RawFeatureData_has_key(self, *args)
    def keys(self): return _feature_build.RawFeatureData_keys(self)
    def values(self): return _feature_build.RawFeatureData_values(self)
    def items(self): return _feature_build.RawFeatureData_items(self)
    def __contains__(self, *args): return _feature_build.RawFeatureData___contains__(self, *args)
    def key_iterator(self): return _feature_build.RawFeatureData_key_iterator(self)
    def value_iterator(self): return _feature_build.RawFeatureData_value_iterator(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args): return _feature_build.RawFeatureData___setitem__(self, *args)
    def __init__(self, *args): 
        this = _feature_build.new_RawFeatureData(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _feature_build.RawFeatureData_empty(self)
    def size(self): return _feature_build.RawFeatureData_size(self)
    def clear(self): return _feature_build.RawFeatureData_clear(self)
    def swap(self, *args): return _feature_build.RawFeatureData_swap(self, *args)
    def get_allocator(self): return _feature_build.RawFeatureData_get_allocator(self)
    def begin(self): return _feature_build.RawFeatureData_begin(self)
    def end(self): return _feature_build.RawFeatureData_end(self)
    def rbegin(self): return _feature_build.RawFeatureData_rbegin(self)
    def rend(self): return _feature_build.RawFeatureData_rend(self)
    def count(self, *args): return _feature_build.RawFeatureData_count(self, *args)
    def erase(self, *args): return _feature_build.RawFeatureData_erase(self, *args)
    def find(self, *args): return _feature_build.RawFeatureData_find(self, *args)
    def lower_bound(self, *args): return _feature_build.RawFeatureData_lower_bound(self, *args)
    def upper_bound(self, *args): return _feature_build.RawFeatureData_upper_bound(self, *args)
    __swig_destroy__ = _feature_build.delete_RawFeatureData
    __del__ = lambda self : None;
RawFeatureData_swigregister = _feature_build.RawFeatureData_swigregister
RawFeatureData_swigregister(RawFeatureData)

class TmpData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TmpData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TmpData, name)
    __repr__ = _swig_repr
    def iterator(self): return _feature_build.TmpData_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _feature_build.TmpData___nonzero__(self)
    def __bool__(self): return _feature_build.TmpData___bool__(self)
    def __len__(self): return _feature_build.TmpData___len__(self)
    def pop(self): return _feature_build.TmpData_pop(self)
    def __getslice__(self, *args): return _feature_build.TmpData___getslice__(self, *args)
    def __setslice__(self, *args): return _feature_build.TmpData___setslice__(self, *args)
    def __delslice__(self, *args): return _feature_build.TmpData___delslice__(self, *args)
    def __delitem__(self, *args): return _feature_build.TmpData___delitem__(self, *args)
    def __getitem__(self, *args): return _feature_build.TmpData___getitem__(self, *args)
    def __setitem__(self, *args): return _feature_build.TmpData___setitem__(self, *args)
    def append(self, *args): return _feature_build.TmpData_append(self, *args)
    def empty(self): return _feature_build.TmpData_empty(self)
    def size(self): return _feature_build.TmpData_size(self)
    def clear(self): return _feature_build.TmpData_clear(self)
    def swap(self, *args): return _feature_build.TmpData_swap(self, *args)
    def get_allocator(self): return _feature_build.TmpData_get_allocator(self)
    def begin(self): return _feature_build.TmpData_begin(self)
    def end(self): return _feature_build.TmpData_end(self)
    def rbegin(self): return _feature_build.TmpData_rbegin(self)
    def rend(self): return _feature_build.TmpData_rend(self)
    def pop_back(self): return _feature_build.TmpData_pop_back(self)
    def erase(self, *args): return _feature_build.TmpData_erase(self, *args)
    def __init__(self, *args): 
        this = _feature_build.new_TmpData(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _feature_build.TmpData_push_back(self, *args)
    def front(self): return _feature_build.TmpData_front(self)
    def back(self): return _feature_build.TmpData_back(self)
    def assign(self, *args): return _feature_build.TmpData_assign(self, *args)
    def resize(self, *args): return _feature_build.TmpData_resize(self, *args)
    def insert(self, *args): return _feature_build.TmpData_insert(self, *args)
    def reserve(self, *args): return _feature_build.TmpData_reserve(self, *args)
    def capacity(self): return _feature_build.TmpData_capacity(self)
    __swig_destroy__ = _feature_build.delete_TmpData
    __del__ = lambda self : None;
TmpData_swigregister = _feature_build.TmpData_swigregister
TmpData_swigregister(TmpData)

FromUser = _feature_build.FromUser
FromItem = _feature_build.FromItem
FromTime = _feature_build.FromTime
FeatureSourceNum = _feature_build.FeatureSourceNum
Bool = _feature_build.Bool
Float = _feature_build.Float
UNKNOWN = _feature_build.UNKNOWN
Time = _feature_build.Time
Date = _feature_build.Date
TimeFeatureTypeNum = _feature_build.TimeFeatureTypeNum
class FeatureBuildRule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureBuildRule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureBuildRule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _feature_build.new_FeatureBuildRule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["combine_num"] = _feature_build.FeatureBuildRule_combine_num_set
    __swig_getmethods__["combine_num"] = _feature_build.FeatureBuildRule_combine_num_get
    if _newclass:combine_num = _swig_property(_feature_build.FeatureBuildRule_combine_num_get, _feature_build.FeatureBuildRule_combine_num_set)
    __swig_setmethods__["feature1_type"] = _feature_build.FeatureBuildRule_feature1_type_set
    __swig_getmethods__["feature1_type"] = _feature_build.FeatureBuildRule_feature1_type_get
    if _newclass:feature1_type = _swig_property(_feature_build.FeatureBuildRule_feature1_type_get, _feature_build.FeatureBuildRule_feature1_type_set)
    __swig_setmethods__["feature1_weight_type"] = _feature_build.FeatureBuildRule_feature1_weight_type_set
    __swig_getmethods__["feature1_weight_type"] = _feature_build.FeatureBuildRule_feature1_weight_type_get
    if _newclass:feature1_weight_type = _swig_property(_feature_build.FeatureBuildRule_feature1_weight_type_get, _feature_build.FeatureBuildRule_feature1_weight_type_set)
    __swig_setmethods__["feature1_source"] = _feature_build.FeatureBuildRule_feature1_source_set
    __swig_getmethods__["feature1_source"] = _feature_build.FeatureBuildRule_feature1_source_get
    if _newclass:feature1_source = _swig_property(_feature_build.FeatureBuildRule_feature1_source_get, _feature_build.FeatureBuildRule_feature1_source_set)
    __swig_setmethods__["feature2_type"] = _feature_build.FeatureBuildRule_feature2_type_set
    __swig_getmethods__["feature2_type"] = _feature_build.FeatureBuildRule_feature2_type_get
    if _newclass:feature2_type = _swig_property(_feature_build.FeatureBuildRule_feature2_type_get, _feature_build.FeatureBuildRule_feature2_type_set)
    __swig_setmethods__["feature2_weight_type"] = _feature_build.FeatureBuildRule_feature2_weight_type_set
    __swig_getmethods__["feature2_weight_type"] = _feature_build.FeatureBuildRule_feature2_weight_type_get
    if _newclass:feature2_weight_type = _swig_property(_feature_build.FeatureBuildRule_feature2_weight_type_get, _feature_build.FeatureBuildRule_feature2_weight_type_set)
    __swig_setmethods__["feature2_source"] = _feature_build.FeatureBuildRule_feature2_source_set
    __swig_getmethods__["feature2_source"] = _feature_build.FeatureBuildRule_feature2_source_get
    if _newclass:feature2_source = _swig_property(_feature_build.FeatureBuildRule_feature2_source_get, _feature_build.FeatureBuildRule_feature2_source_set)
    __swig_setmethods__["feature3_type"] = _feature_build.FeatureBuildRule_feature3_type_set
    __swig_getmethods__["feature3_type"] = _feature_build.FeatureBuildRule_feature3_type_get
    if _newclass:feature3_type = _swig_property(_feature_build.FeatureBuildRule_feature3_type_get, _feature_build.FeatureBuildRule_feature3_type_set)
    __swig_setmethods__["feature3_weight_type"] = _feature_build.FeatureBuildRule_feature3_weight_type_set
    __swig_getmethods__["feature3_weight_type"] = _feature_build.FeatureBuildRule_feature3_weight_type_get
    if _newclass:feature3_weight_type = _swig_property(_feature_build.FeatureBuildRule_feature3_weight_type_get, _feature_build.FeatureBuildRule_feature3_weight_type_set)
    __swig_setmethods__["feature3_source"] = _feature_build.FeatureBuildRule_feature3_source_set
    __swig_getmethods__["feature3_source"] = _feature_build.FeatureBuildRule_feature3_source_get
    if _newclass:feature3_source = _swig_property(_feature_build.FeatureBuildRule_feature3_source_get, _feature_build.FeatureBuildRule_feature3_source_set)
    __swig_destroy__ = _feature_build.delete_FeatureBuildRule
    __del__ = lambda self : None;
FeatureBuildRule_swigregister = _feature_build.FeatureBuildRule_swigregister
FeatureBuildRule_swigregister(FeatureBuildRule)

class CTRPredictFeatureBuilder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTRPredictFeatureBuilder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTRPredictFeatureBuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _feature_build.new_CTRPredictFeatureBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def FeatureFromRawFeatureBuild(self, *args): return _feature_build.CTRPredictFeatureBuilder_FeatureFromRawFeatureBuild(self, *args)
    def GetSimAndSet(self, *args): return _feature_build.CTRPredictFeatureBuilder_GetSimAndSet(self, *args)
    def SingleFeatureGenerate(self, *args): return _feature_build.CTRPredictFeatureBuilder_SingleFeatureGenerate(self, *args)
    def TwoFeatureGenerate(self, *args): return _feature_build.CTRPredictFeatureBuilder_TwoFeatureGenerate(self, *args)
    def ThreeFeatureGenerate(self, *args): return _feature_build.CTRPredictFeatureBuilder_ThreeFeatureGenerate(self, *args)
    __swig_destroy__ = _feature_build.delete_CTRPredictFeatureBuilder
    __del__ = lambda self : None;
CTRPredictFeatureBuilder_swigregister = _feature_build.CTRPredictFeatureBuilder_swigregister
CTRPredictFeatureBuilder_swigregister(CTRPredictFeatureBuilder)

class PythonUtil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PythonUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PythonUtil, name)
    __repr__ = _swig_repr
    def BuildFeature(self, *args): return _feature_build.PythonUtil_BuildFeature(self, *args)
    def test(self, *args): return _feature_build.PythonUtil_test(self, *args)
    def __init__(self): 
        this = _feature_build.new_PythonUtil()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _feature_build.delete_PythonUtil
    __del__ = lambda self : None;
PythonUtil_swigregister = _feature_build.PythonUtil_swigregister
PythonUtil_swigregister(PythonUtil)



